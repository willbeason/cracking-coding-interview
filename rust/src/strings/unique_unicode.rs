use rand::Rng;
use rand::distr::StandardUniform;
use std::collections::HashSet;

pub fn get_random_string(len: usize) -> String {
    rand::rng()
        .sample_iter::<char, _>(StandardUniform)
        .take(len)
        .collect()
}

/// unique_unicode_1 is the autocomplete suggestion for the solution.
pub fn unique_unicode_1(s: &str) -> bool {
    let mut seen = HashSet::new();
    for c in s.chars() {
        if !seen.insert(c) {
            return false;
        }
    }
    true
}

/// unique_unicode_2 is another autocomplete suggestion for the solution.
/// Fails for non-ascii as len() returns the length in bytes, not the number of
/// characters.
pub fn unique_unicode_2(s: &str) -> bool {
    s.chars().collect::<HashSet<_>>().len() == s.len()
}

/// unique_unicode_2a is a manual correction of the above.
pub fn unique_unicode_2a(s: &str) -> bool {
    s.chars().collect::<HashSet<_>>().len() == s.chars().count()
}

/// unique_unicode_3 is an initial bitarray attempt.
pub fn unique_unicode_3(s: &str) -> bool {
    let mut bitarray = [false; 1024*1024];
    for c in s.chars() {
        if bitarray[c as usize] {
            return false;
        }
        bitarray[c as usize] = true;
    }
    true
}
#[cfg(test)]
mod tests {
    use super::*;

    const SOLUTIONS: [(&str, fn(&str) -> bool); 3] = [
        ("1", unique_unicode_1),
        ("2", unique_unicode_2a),
        ("3", unique_unicode_3),
    ];

    #[test]
    fn test_unique_unicode() {
        for (s, f) in SOLUTIONS {
            assert!(f(""));
            assert!(f("a"), "Solution {}", s);
            assert!(!f("aa"), "Solution {}", s);
            assert!(f("ab"), "Solution {}", s);
            assert!(f("abc"), "Solution {}", s);
            assert!(!f("abca"), "Solution {}", s);
            assert!(!f("Ã¤Ã¤"), "Solution {}, f({}) = {}", s, "Ã¤Ã¤", f("Ã¤Ã¤"));
            assert!(f("aÃ¤"), "Solution {}, f({}) = {}", s, "aÃ¤", f("aÃ¤"));
            assert!(f("èŠ¼ç½¡"), "Solution {}, f({}) = {}", s, "èŠ¼ç½¡", f("èŠ¼ç½¡"));
            assert!(!f("èŠ¼èŠ¼"), "Solution {}, f({}) = {}", s, "èŠ¼èŠ¼", f("èŠ¼èŠ¼"));
            assert!(f("ã…±èŠ¼"), "Solution {}, f({}) = {}", s, "ã…±èŠ¼", f("ã…±èŠ¼"));
            assert!(!f("ã…±ã…±"), "Solution {}, f({}) = {}", s, "ã…±ã…±", f("ã…±ã…±"));
            assert!(!f("ð“€ƒð“€ƒ"), "Solution {}, f({}) = {}", s, "ð“€ƒð“€ƒ", f("ð“€ƒð“€ƒ"));
            assert!(!f("ð“€ƒð“€ƒ"), "Solution {}, f({}) = {}", s, "ð“€ƒð“€ƒ", f("ð“€ƒð“€ƒ"));
            assert!(f("ó ‡¯ð“€ƒ"), "Solution {}, f({}) = {}", s, "ó ‡¯ð“€ƒ", f("ó ‡¯ð“€ƒ"));
            assert!(!f("ó ‡¯ó ‡¯ó ‡¯"), "Solution {}, f({}) = {}", s, "ó ‡¯ó ‡¯", f("ó ‡¯ó ‡¯"));
        }
    }
}
